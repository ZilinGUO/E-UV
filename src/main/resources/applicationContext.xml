<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 扫描com.smart.dao包下所有标注@Repository的DAO组件 -->
    <context:component-scan base-package="com.rmc.dao"/>

    <!-- 引入定义JDBC连接的属性文件-->
    <!--<context:property-placeholder location="classpath:jdbc.properties"/> -->
    <!-- 定义一个数据源-->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="com.mysql.jdbc.Driver"
          p:url="jdbc:mysql://localhost:3306/myapp"
          p:username="root"
          p:password="" />

    <!-- 定义Hibernate的Session工厂-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan"><!-- 扫描基于JPA注解的PO类目录-->
            <list>
                <value>com.rmc.po</value>
            </list>
        </property>
        <!--指定Hibernate的属性信息 -->
        <property name="hibernateProperties">
            <props>
                <!--指定数据库的类型为MySQL-->
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQLDialect
                </prop>
                <!--在提供数据库操作里显示SQL 方便开发期的调试，在部署时应该将其设计为false -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
            </props>
        </property>


    </bean>

    <!--定义HibernateTemplate -->
    <bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate4.HibernateTemplate"
          p:sessionFactory-ref="sessionFactory" />

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="create*" propagation="REQUIRED" read-only="false" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false" />
            <tx:method name="reg*" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* com.rmc.*.*(..)))" order="1"/>
    </aop:config>

    <!--服务层配置 -->
    <!-- 扫描com.smart.service包下所有标注@Service的服务组件 -->
    <context:component-scan base-package="com.rmc.service"/>

    <!--事务管理-->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager"
          p:sessionFactory-ref="sessionFactory" />
    <bean id="requestMappingHandlerAdapter"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>
</beans>
